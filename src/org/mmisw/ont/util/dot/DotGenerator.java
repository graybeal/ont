package org.mmisw.ont.util.dot;

import java.io.PrintWriter;
import java.io.Writer;
import java.util.Date;


import com.hp.hpl.jena.rdf.model.Model;


/**
 * Generates dot for a given ontology.
 * This is an abstract base class (use the factory method {@link #createInstance(Model, boolean)} to get
 * an instance); there is some refactoring/simplification in progress..
 * 
 * @author Carlos Rueda
 */
public abstract class DotGenerator {
	public enum What { CLASS_INSTANCE_DIAGRAM, CLASS_DIAGRAM, INSTANCE_DIAGRAM,  };
	
	public static final What DEFAULT_DIAGRAM_TYPE = What.CLASS_INSTANCE_DIAGRAM;
	
	public static final boolean DEFAULT_INCLUDE_LEGEND = false;
	
	
	protected static final String CLASS_STYLE = 
		"[ " +
			"shape=record, " +
			"fillcolor=cornsilk, " +
			"style=filled, " +
			"fontname=\"helvetica\", " +
			"fontsize=14, " +
		"];"
	;

	protected static final String INSTANCE_STYLE = 
		"[ " +
			"shape=box, " +
			"fillcolor=burlywood1, " +
			"style=filled, " +
			"fontname=\"helvetica\", " +
			"fontsize=12, " +
		"]; "
	;

	
	/** 
	 * Creates a dot generator with some defaults 
	 * {@link #DEFAULT_DIAGRAM_TYPE}
	 * {@link #DEFAULT_INCLUDE_LEGEND}
	 * 
	 * @param ontModel The model to read
	 */
	public static DotGenerator createInstance(Model ontModel) {
//		DotGenerator dg = new DotGenerator1(ontModel);
		DotGenerator dg = new DotGenerator2(ontModel);
		
		return dg;
	}
	

	protected static final String PREFIXES =
		"PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n" +
		"PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n" +
		"PREFIX owl: <http://www.w3.org/2002/07/owl#>\n"
	;

	

	protected Model _model;
	protected PrintWriter pw;
	
	protected boolean includeLegend = DEFAULT_INCLUDE_LEGEND;
	
	
	protected What whatDiagram = DEFAULT_DIAGRAM_TYPE;
	
	//use label instead of local name?
	protected boolean useLabel = true;

	/** 
	 * Creates a dot generator with some defaults 
	 * {@link #DEFAULT_DIAGRAM_TYPE}
	 * {@link #DEFAULT_INCLUDE_LEGEND}
	 * 
	 * @param model The model to read
	 */
	protected DotGenerator(Model model) {
		this._model = model;
	}

	/**
	 * @param includeLegend
	 */ 
	public void setIncludeLegend(boolean includeLegend) {
		this.includeLegend = includeLegend;
	}


	/**
	 * Sets the type of diagram to generate
	 */
	public void setDiagramType(What what) {
		this.whatDiagram = what;
	}


	/**
	 * Sets whether the rdfs:label should be used to label property edges instead of the local name
	 * of the property.
	 * @param useLabel
	 */
	public void setUseLabel(boolean useLabel) {
		this.useLabel = useLabel;
	}

	/**
	 * Sets whether rdfs:comment should be included when generating instance diagram.
	 * NOT IMPLEMENTED YET
	 * @param ignoreRdfsComment
	 */
	public void setIgnoreRdfsComment(boolean ignoreRdfsComment) {
		// TODO
	}

	
	/**
	 * Generates the dot.
	 * @param writer 
	 */
	public void generateDot(Writer writer, String... header) {
		if ( writer instanceof PrintWriter ) {
			this.pw = (PrintWriter) writer;
		}
		else {
			this.pw = new PrintWriter(writer);
		}

		generateHeader(header);
		generateContents();
		generateFooter();
	}

	
	protected abstract void generateContents();


	/**
	 * Generates the dot.
	 * @param writer 
	 */
	protected void generateHeader(String... header) {
		pw.println("# generated by " +this.getClass().getName()+ " on " +new Date());
		if ( header != null ) {
			for ( String line : header ) {
				if ( ! line.trim().startsWith("#") ) {
					line = "#" + line;
				}
				pw.println(line);
			}
		}
		
		pw.println();
		pw.println("digraph {");
		

	}

	/**
	 * Closes the dot contents.
	 * @param writer 
	 */
	protected void generateFooter() {
		pw.println("\n}");
	}
	
	protected void _outNodeClassStyles() {
		pw.println("  node " +CLASS_STYLE);
	}
	
	protected void _outNodeInstanceStyle() {
		pw.println("  node " +INSTANCE_STYLE);
	}



	protected void _outEdgeStyles() {
		pw.println("  edge [ " +
				"fontname=\"helvetica\", " +
				"fontsize=11, " +
				"]; "
		);
	}


}
